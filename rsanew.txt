package org.rbfcu.netbranch.card.utility;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.MGF1ParameterSpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.spec.OAEPParameterSpec;
import javax.crypto.spec.PSource.PSpecified;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RSAEncryptionUtil {

	private static final Logger LOG = LoggerFactory.getLogger(RSAEncryptionUtil.class);

	private static final String ALGORITHM = "SHA256withRSA";
	private static final String ENCODING_METHOD = "UTF-8";

	private static RSAPublicKey getPublicKey(String filename) throws Exception {
		File file1 = new File("D:\\keys\\public_key.der");
		FileInputStream fis1 = new FileInputStream(file1);
		DataInputStream dis1 = new DataInputStream(fis1);
		byte[] keyBytes1 = new byte[(int) file1.length()];
		dis1.readFully(keyBytes1);
		dis1.close();
		X509EncodedKeySpec spec1 = new X509EncodedKeySpec(keyBytes1);
		KeyFactory kf1 = KeyFactory.getInstance("RSA");
		RSAPublicKey pubKey = (RSAPublicKey) kf1.generatePublic(spec1);
		return pubKey;

	}

	public static RSAPrivateKey getPrivateKey(String key) throws IOException, GeneralSecurityException {
		File file = new File("D:\\keys\\private_key.der");
		FileInputStream fis = new FileInputStream(file);
		DataInputStream dis = new DataInputStream(fis);

		byte[] keyBytes = new byte[(int) file.length()];
		dis.readFully(keyBytes);
		dis.close();

		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		RSAPrivateKey privKey = (RSAPrivateKey) kf.generatePrivate(spec);
		return privKey;
	}

	public static void main(String[] args) throws Exception {
		byte[] cipherText = null;
		Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
		cipher.init(Cipher.ENCRYPT_MODE, getPublicKey("D:\\keys\\public_key.der"));
		cipherText = cipher.doFinal("Seema".getBytes(StandardCharsets.UTF_8));
		System.out.println(cipherText);

		Cipher cObj = Cipher.getInstance("RSA/ECB/OAEPPadding");
		OAEPParameterSpec oaepParams = new OAEPParameterSpec("SHA-256", "MGF1", new MGF1ParameterSpec("SHA-1"), PSpecified.DEFAULT);
		cObj.init(Cipher.DECRYPT_MODE, getPrivateKey("D:\\keys\\private_key.der"), oaepParams);
		byte[] pt = cObj.doFinal(cipherText);
		System.out.println(new String(pt, StandardCharsets.UTF_8));

	}

	/*public static RSAPublicKey getPublicKeyFromString(String key) throws IOException, GeneralSecurityException {
		String publicKeyPEM = key;
		publicKeyPEM = publicKeyPEM.replace("-----BEGIN RSA PUBLIC KEY-----\n", "");
		publicKeyPEM = publicKeyPEM.replace("-----END RSA PUBLIC KEY-----", "");
		byte[] encoded = org.apache.commons.codec.binary.Base64.decodeBase64(publicKeyPEM);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		RSAPublicKey pubKey = (RSAPublicKey) kf.generatePublic(new X509EncodedKeySpec(encoded));
		return pubKey;
	}*/

	/*public static void main(String[] args) throws Exception {
		Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
		cipher.init(Cipher.ENCRYPT_MODE, getPublicKey("D:\\keys\\public_key.der"));
		byte[] cipherText = cipher.doFinal("Seema".getBytes(StandardCharsets.UTF_8));
		System.out.println(cipherText);
	
		Cipher cObj = Cipher.getInstance("RSA/ECB/OAEPPadding");
		OAEPParameterSpec oaepParams = new OAEPParameterSpec("SHA-256", "MGF1", new MGF1ParameterSpec("SHA-1"), PSpecified.DEFAULT);
		cObj.init(Cipher.DECRYPT_MODE, getPrivateKey("D:\\keys\\private_key.der"), oaepParams);
		byte[] pt = cObj.doFinal(cipherText);
		System.out.println(new String(pt, StandardCharsets.UTF_8));
	}*/

}
